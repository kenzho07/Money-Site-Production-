diff --git a/src/Mapper/PrivateMessageMapper.php b/src/Mapper/PrivateMessageMapper.php
index bc36827..cfd29dd 100644
--- a/src/Mapper/PrivateMessageMapper.php
+++ b/src/Mapper/PrivateMessageMapper.php
@@ -63,7 +63,7 @@ class PrivateMessageMapper implements PrivateMessageMapperInterface {
 
     // Next, do a left join for all rows that don't contain the users, and
     // ensure that there aren't any additional users in selected threads.
-    $alias = $query->leftJoin('private_message_thread__members', 'member', 'member.entity_id = pm.id AND member.members_target_id NOT IN (:uids[])', [':uids[]' => $uids]);
+    $alias = $query->leftJoin('private_message_thread__members', 'thread_member', 'thread_member.entity_id = pm.id AND thread_member.members_target_id NOT IN (:uids[])', [':uids[]' => $uids]);
     $query->isNull($alias . '.members_target_id');
 
     return $query->execute()->fetchField();
@@ -75,8 +75,8 @@ class PrivateMessageMapper implements PrivateMessageMapperInterface {
   public function getFirstThreadIdForUser(UserInterface $user) {
     return $this->database->queryRange('SELECT thread.id ' .
       'FROM {private_message_threads} AS thread ' .
-      'JOIN {private_message_thread__members} AS member ' .
-      'ON member.entity_id = thread.id AND member.members_target_id = :uid ' .
+      'JOIN {private_message_thread__members} AS thread_member ' .
+      'ON thread_member.entity_id = thread.id AND thread_member.members_target_id = :uid ' .
       'JOIN {private_message_thread__private_messages} AS thread_messages ' .
       'ON thread_messages.entity_id = thread.id ' .
       'JOIN {private_messages} AS messages ' .
@@ -99,8 +99,8 @@ class PrivateMessageMapper implements PrivateMessageMapperInterface {
   public function getThreadIdsForUser(UserInterface $user, $count, $timestamp = FALSE) {
     $query = 'SELECT DISTINCT(thread.id), MAX(thread.updated) ' .
       'FROM {private_message_threads} AS thread ' .
-      'JOIN {private_message_thread__members} AS member ' .
-      'ON member.entity_id = thread.id AND member.members_target_id = :uid ' .
+      'JOIN {private_message_thread__members} AS thread_member ' .
+      'ON thread_member.entity_id = thread.id AND thread_member.members_target_id = :uid ' .
       'JOIN {private_message_thread__private_messages} AS thread_messages ' .
       'ON thread_messages.entity_id = thread.id ' .
       'JOIN {private_messages} AS messages ' .
@@ -134,8 +134,8 @@ class PrivateMessageMapper implements PrivateMessageMapperInterface {
   public function checkForNextThread(UserInterface $user, $timestamp) {
     $query = 'SELECT DISTINCT(thread.id) ' .
       'FROM {private_message_threads} AS thread ' .
-      'JOIN {private_message_thread__members} AS member ' .
-      'ON member.entity_id = thread.id AND member.members_target_id = :uid ' .
+      'JOIN {private_message_thread__members} AS thread_member ' .
+      'ON thread_member.entity_id = thread.id AND thread_member.members_target_id = :uid ' .
       'JOIN {private_message_thread__private_messages} AS thread_messages ' .
       'ON thread_messages.entity_id = thread.id ' .
       'JOIN {private_messages} AS messages ' .
@@ -166,10 +166,15 @@ class PrivateMessageMapper implements PrivateMessageMapperInterface {
       $query = 'SELECT user_data.uid FROM {users_field_data} AS user_data LEFT ' .
         'JOIN {user__roles} AS user_roles ' .
         'ON user_roles.entity_id = user_data.uid ' .
+        'LEFT JOIN {user__field_fir} AS user_firstname ' .
+        'ON user_firstname.entity_id = user_data.uid ' .
+        'LEFT JOIN {user__field_last_name} AS user_lastname ' .
+        'ON user_lastname.entity_id = user_data.uid ' .
         'LEFT JOIN {config} AS role_config ' .
         "ON role_config.name = CONCAT('user.role.', user_roles.roles_target_id) " .
         'JOIN {config} AS config ON config.name = :authenticated_config WHERE ' .
-        'user_data.name LIKE :string AND user_data.name != :current_user AND ' .
+        '(user_data.name LIKE :string OR user_firstname.field_fir_value LIKE :string OR user_lastname.field_last_name_value LIKE :string ) AND ' . 
+        'user_data.name != :current_user AND ' .
         '(config.data LIKE :use_pm_permission ' .
         'OR role_config.data LIKE :use_pm_permission) ' .
         'ORDER BY user_data.name ASC';
@@ -198,8 +203,8 @@ class PrivateMessageMapper implements PrivateMessageMapperInterface {
   public function getUpdatedInboxThreadIds(array $existingThreadIds, $count = FALSE) {
     $query = 'SELECT DISTINCT(thread.id), updated ' .
       'FROM {private_message_threads} AS thread ' .
-      'JOIN {private_message_thread__members} AS member ' .
-      'ON member.entity_id = thread.id AND member.members_target_id = :uid ' .
+      'JOIN {private_message_thread__members} AS thread_member ' .
+      'ON thread_member.entity_id = thread.id AND thread_member.members_target_id = :uid ' .
       'JOIN {private_message_thread__private_messages} AS thread_messages ' .
       'ON thread_messages.entity_id = thread.id ' .
       'JOIN {private_messages} AS messages ' .
@@ -246,17 +251,24 @@ class PrivateMessageMapper implements PrivateMessageMapperInterface {
   }
 
   /**
-   * {@inheritdoc}
+   * {@inheritdoc} edit by ziting
    */
   public function getUnreadThreadCount($uid, $lastCheckTimestamp) {
+    
     return $this->database->query(
       'SELECT COUNT(thread.id) FROM {private_message_threads} AS thread JOIN ' .
-      '{private_message_thread__members} AS member ' .
-      'ON member.entity_id = thread.id AND member.members_target_id = :uid ' .
-      'WHERE thread.updated > :timestamp',
+      '{private_message_thread__members} AS thread_member ' .
+      'ON thread_member.entity_id = thread.id AND thread_member.members_target_id = :uid ' .
+
+      'JOIN {private_message_thread__last_access}_time AS last_access ' .
+      'ON last_access.entity_id = thread.id ' .
+      'JOIN {pm_thread_access_time} as access_time ' .
+      'ON access_time.id = last_access.last_access_time_target_id AND access_time.owner = :uid AND access_time.access_time < thread.updated',
+
+      //'WHERE thread.updated > :timestamp',
       [
         ':uid' => $uid,
-        ':timestamp' => $lastCheckTimestamp,
+        //':timestamp' => $lastCheckTimestamp,
       ]
     )->fetchField();
   }
